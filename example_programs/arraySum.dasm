// Make sure to run this with verbose mode on 
// (tacking on -v) to actually see the registers
// and memory change otherwise nothing shows up
section .text

sum_array:
    ldi r1, =array_of_numbers
    ldi r2, #4                  // number of elements in the array
    ldi r3, #0                  // counter
    ldi r4, #0                  // the result
_loop:
    add r1, r1, #4              // go to the next element
    ldx r5, r1                  // store the current array element in r5
    add r4, r4, r5              // add the element to r4 and store it in r4
    add r3, r3, #1              // increment the counter
    cmp r3, r2
    blt =_loop                  // if the counter is less than the elements in the array
                                // go back through the loop
    str r4, =sum                // save the sum to memory

    mov pc, lr          // move the link register to the program counter to 
                        // return back to the main function



exit:
    mov r7, #1	        // move 1 into r7
    mov r0, #0x0	    // move 0 into r0
    swi #0x0	        // call software interupt

_start:
    bl =sum_array
    bl =exit

section .data
    array_of_numbers:
        .iarr {0x34,23,2,0x56}
    sum:
        .skip 4          